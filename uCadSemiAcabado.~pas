unit uCadSemiAcabado;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, uCadPadrao, ZSqlUpdate, DB, ZAbstractRODataset,
  ZAbstractDataset, ZDataset, ActnList, ImgList, Grids, DBGrids, ComCtrls,
  StdCtrls, ToolWin, jpeg, ExtCtrls, DBCtrls, Mask, CheckDBGrid, XiButton;

type
  TfCadSemiAcabado = class(TfCadPadrao)
    Label2: TLabel;
    Label3: TLabel;
    DBEdit1: TDBEdit;
    DBEdit2: TDBEdit;
    TabSheet4: TTabSheet;
    Label6: TLabel;
    qProc: TZQuery;
    dProc: TDataSource;
    grProc: TCheckDBGrid;
    qProcItem: TZQuery;
    dProcItem: TDataSource;
    qProcItemId: TIntegerField;
    qProcItemIdProduto: TIntegerField;
    qProcItemQtde: TFloatField;
    TId: TIntegerField;
    TDescricao: TStringField;
    CheckDBGrid4: TCheckDBGrid;
    qProcItemdescricao: TStringField;
    qProc2: TZQuery;
    dProc2: TDataSource;
    qProc2Id: TIntegerField;
    qProc2Descricao: TStringField;
    btExcluirP: TXiButton;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    btExcluirI: TXiButton;
    upProcItem: TZUpdateSQL;
    qProcItemUn: TStringField;
    Bevel2: TBevel;
    Bevel3: TBevel;
    upProc: TZUpdateSQL;
    edCod: TEdit;
    EdNom: TEdit;
    gdPesq: TDBGrid;
    Label4: TLabel;
    Label5: TLabel;
    qProcIdSemiAcabado: TIntegerField;
    qProcUltimo: TStringField;
    qProcOrdem: TIntegerField;
    qProcTempo: TTimeField;
    qProcCusto: TFloatField;
    qProcDescricao: TStringField;
    btAddP: TXiButton;
    cbProcesso: TComboBox;
    ckUltimo: TCheckBox;
    edOrdem: TMaskEdit;
    edCusto: TMaskEdit;
    edTempo: TMaskEdit;
    qProcId: TIntegerField;
    qProcIdProcesso: TIntegerField;
    qProcItemIdProcesso_sa: TIntegerField;
    edQtd: TMaskEdit;
    cbUn: TComboBox;
    BtAddPi: TXiButton;
    procedure acInserirExecute(Sender: TObject);
    procedure acEditarExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure acSalvarExecute(Sender: TObject);
    procedure TNewRecord(DataSet: TDataSet);
    procedure EdPesqChange(Sender: TObject);
    procedure acCancelarExecute(Sender: TObject);
    procedure TAfterScroll(DataSet: TDataSet); 
    procedure qProcAfterScroll(DataSet: TDataSet);
    procedure btExcluirPClick(Sender: TObject);
    procedure btExcluirIClick(Sender: TObject);
    procedure gdPesqKeyPress(Sender: TObject; var Key: Char);
    procedure EdNomChange(Sender: TObject);
    procedure edCodKeyPress(Sender: TObject; var Key: Char);
    procedure edCodExit(Sender: TObject);
    procedure btAddPClick(Sender: TObject);
    procedure grProcDrawColumnCell(Sender: TObject;
      const Rect: TRect; DataCol: Integer; Column: TColumn;
      State: TGridDrawState);
    procedure qProcAfterPost(DataSet: TDataSet);
    procedure EdNomKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edQtdKeyPress(Sender: TObject; var Key: Char);
    procedure edCustoKeyPress(Sender: TObject; var Key: Char);
    procedure edTempoKeyPress(Sender: TObject; var Key: Char);
    procedure BtAddPiClick(Sender: TObject);
    procedure qProcItemAfterPost(DataSet: TDataSet);
    procedure CheckDBGrid4CellClick(Column: TColumn);
    procedure CheckDBGrid4KeyPress(Sender: TObject; var Key: Char);
    procedure CheckDBGrid4KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure grProcKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure acSairExecute(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fCadSemiAcabado: TfCadSemiAcabado;

implementation

uses uDM, uFuncao;

{$R *.dfm}

procedure TfCadSemiAcabado.acInserirExecute(Sender: TObject);
begin
  inherited;
  DBEdit1.ReadOnly := True;
  DBEdit1.Color := $00CEFDFC;
  DBEdit2.SetFocus;

  BtExcluirI.Enabled := true;
  btExcluirP.Enabled := true;
  btAddP.Enabled     := true;
  btAddPi.Enabled    := true;

  edCod.ReadOnly        := False;
  edNom.ReadOnly        := False;
  edCod.Color           := clWhite;
  edNom.Color           := clWhite;
  checkDbgrid4.ReadOnly := false;
  checkDbgrid4.Columns[1].Color := clWhite;
  checkDbgrid4.Columns[2].Color := clWhite;

  grProc.ReadOnly := false;
  grProc.Columns[3].ReadOnly := false;
  grProc.Columns[3].Color := clWhite;


end;

procedure TfCadSemiAcabado.acEditarExecute(Sender: TObject);
begin
  inherited;
  DBEdit1.ReadOnly := True;
  DBEdit1.Color := $00CEFDFC;
  DBEdit2.SetFocus;

  BtExcluirI.Enabled := true;
  btExcluirP.Enabled := true;
  btAddP.Enabled     := true;
  btAddPi.Enabled    := true;

  edCod.ReadOnly     := False;
  edNom.ReadOnly     := False;
  edCod.Color := clWhite;
  edNom.Color := clWhite;
  checkDbgrid4.ReadOnly := false;
  checkDbgrid4.Columns[1].Color := clWhite;
  checkDbgrid4.Columns[2].Color := clWhite;

  grProc.ReadOnly := false;
  grProc.Columns[3].ReadOnly := false;
  grProc.Columns[3].Color := clWhite;

end;

procedure TfCadSemiAcabado.FormCreate(Sender: TObject);
var
  i :integer;
begin
  inherited;

  qProc2.Open;
  cbProcesso.Items.Clear;
  for i := 0 to qProc2.RecordCount -1 do Begin
    cbProcesso.Items.Add(formatfloat( '000', qProc2Id.Value) + ' ' + qProc2Descricao.Text  );
    qProc2.Next;
  end;
  cbProcesso.Update;
  cbProcesso.ItemIndex := -1;

  edCod.ReadOnly        := true;
  edNom.ReadOnly        := true;
  EdCod.Color           := StringToColor('$00CEFDFC');
  edNom.Color           := StringToColor('$00CEFDFC');
  checkDbgrid4.ReadOnly         := true;
  checkDbgrid4.Columns[1].Color := StringToColor('$00CEFDFC');
  checkDbgrid4.Columns[2].Color := StringToColor('$00CEFDFC');

  grProc.ReadOnly            := true;
  grProc.Columns[3].ReadOnly := true;
  grProc.Columns[3].Color    := StringToColor('$00CEFDFC');

end;

procedure TfCadSemiAcabado.acSalvarExecute(Sender: TObject);
var
  vUltimo, vSemQtd : integer;
begin
  vUltimo := 0;
  vSemQtd := 0;

  SelectNext(ActiveControl, True, True);

  if (Tdescricao.Text = '' ) then begin
     Application.MessageBox('Descrição não preenchida.','Atenção');
     DBEdit2.SetFocus;
     exit;
  end;

  dm.qPesq.close;
  dm.qPesq.SQL.Clear;
  dm.qPesq.SQL.Add('select * from semi_acabado where descricao = ' + quotedstr(trim(Tdescricao.Text)) );
  dm.qPesq.Open;
  if T.State in [dsInsert] then
  begin
     if dm.qPesq.RecordCount >= 1 then
     begin
       Application.MessageBox('Semiacabado ja Cadastrado, Por Favor Tente Novamente','Atenção');
       dbedit2.SetFocus;
       exit;
     end;
  end;

  //testar se é somente um último
  qProc.First;
  while not qProc.Eof do begin
      if qProcUltimo.Text = 'T' then
         vUltimo := vUltimo +1;
      //testar se existe quantidade sem preencher
      qProcItem.First;
      while not qProcItem.Eof do begin
        if not (qProcItemQtde.AsFloat > 0) then begin
          vSemQtd := vSemQtd + 1;
        end;
        qProcItem.Next;
      end;
      qProc.Next;
  end;

  if vSemQtd > 0 then begin
     Application.MessageBox('Informe Quantidade para os itens dos processos', 'Atenção');
     PageControl1.ActivePageIndex := 2;
     exit;
  end;

  if (vUltimo = 0) then
  begin
    Application.MessageBox('Escolha um processo para ser o último', 'Atenção');
    PageControl1.ActivePageIndex := 2;
    exit;
  end
  else
  if (vUltimo > 1) then
  begin
    Application.MessageBox('Apenas um único processo pode ser o último', 'Atenção');
    PageControl1.ActivePageIndex := 2;
    exit;
  end;

  inherited;

  BtExcluirI.Enabled := false;
  btExcluirP.Enabled := false;
  btAddP.Enabled     := false;
  btAddPi.Enabled    := false;

  edCod.ReadOnly     := true;
  edNom.ReadOnly     := true;
  EdCod.Color        := StringToColor('$00CEFDFC');
  edNom.Color        := StringToColor('$00CEFDFC');
  checkDbgrid4.ReadOnly := false;
  checkDbgrid4.Columns[1].Color := StringToColor('$00CEFDFC');
  checkDbgrid4.Columns[2].Color := StringToColor('$00CEFDFC');

  grProc.ReadOnly := true;
  grProc.Columns[3].Color := StringToColor('$00CEFDFC');


end;

procedure TfCadSemiAcabado.TNewRecord(DataSet: TDataSet);
begin
  inherited;

  DM.qIns.Close;
  DM.qIns.SQL.Clear;
  DM.qIns.SQL.Add('select max(id) as Cod from semi_acabado ');
  DM.qIns.Open;

  TId.Value := DM.qIns.FieldByName('Cod').AsInteger + 1;

  qProc.Close;
  qProc.Params[0].Value :=0;
  qProc.Open;

  qProcItem.Close;
  qProcItem.Params[0].Value :=0;
  qProcItem.Open;
end;

procedure TfCadSemiAcabado.EdPesqChange(Sender: TObject);
begin
  T.Close;
  T.ParamByName('pesq').Value := '%' + trim(edPesq.Text) + '%';
  T.Open;
  
end;

procedure TfCadSemiAcabado.acCancelarExecute(Sender: TObject);
begin
  //ExecSQL('Delete from processo_SA where idSemiAcabado = ' + TId.Text);

  inherited;
  BtExcluirI.Enabled := false;
  btExcluirP.Enabled := false;
  btAddP.Enabled     := false;

end;

procedure TfCadSemiAcabado.TAfterScroll(DataSet: TDataSet);

begin

  if T.State = dsBrowse then
  begin
    qProc.Close;
    qProc.ParamByName('IDs').Text := TId.Text;
    qProc.Open;
  end;

end;

procedure TfCadSemiAcabado.qProcAfterScroll(DataSet: TDataSet);
begin

  qProcItem.close;
  qProcItem.ParamByName('IDp').AsInteger := qProcId.AsInteger;
  qProcItem.Open;

end;

procedure TfCadSemiAcabado.btExcluirPClick(Sender: TObject);
begin

  if qProc.IsEmpty then
     Exit;

  if Application.MessageBox('Deseja realmente Excluir este Processo?','Confirmação', mb_yesno + mb_defbutton2 ) = idNo then
     Exit;

  Execsql('delete from processo_SA_I where idProcesso_sa = ' + qProcId.Text );
  sleep(100);
  qProc.delete;
  qProc.ApplyUpdates;

end;

procedure TfCadSemiAcabado.btExcluirIClick(Sender: TObject);
begin
  if qProcItem.IsEmpty then
     Exit;

  if Application.MessageBox('Deseja realmente Excluir esta Matéria-Prima?','Confirmação', mb_yesno + mb_defbutton2 ) = idNo then
     Exit;
  qProcItem.Delete;
  qProcItem.ApplyUpdates;
end;

procedure TfCadSemiAcabado.gdPesqKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
   if Key = #13 then
   begin
    Key := #0;

    EdCod.Text := DM.qPesq.FieldByName('id').Value;
    edCodExit(Application);

   end;
end;

procedure TfCadSemiAcabado.EdNomChange(Sender: TObject);
begin
  inherited;
  if (EdNom.Text <> '')  then
  begin

    gdPesq.left := edCod.Left;
    gdPesq.Top  := edCod.Top + edCod.Height + 2;

    DM.qPesq.Close;
    DM.qPesq.SQL.Clear;
    DM.qPesq.SQL.Add(' select id, descricao nome, ft_conv_un, ft_conv_2un from produto where tipo = ''M'' and ' +
                     ' descricao like '+QuotedStr('%'+EdNom.Text+'%'));
    DM.qPesq.Open;

    if DM.qPesq.IsEmpty then
      gdPesq.Visible := False
    else
     gdPesq.Visible := True;
  end
  else
     gdPesq.Visible := False;

end;

procedure TfCadSemiAcabado.edCodKeyPress(Sender: TObject; var Key: Char);
begin
  somente_numero_sem_virgula(key);
end;

procedure TfCadSemiAcabado.edCodExit(Sender: TObject);
begin

  cbUn.Items.Clear;
  if edCod.Text <> '' then begin
    DM.qPesq.Close;
    DM.qPesq.SQL.Clear;
    DM.qPesq.SQL.Add(' select id, descricao nome, ft_conv_un, ft_conv_2un from produto where tipo = ''M'' and ' +
                     ' id =  '+ edCod.Text );
    DM.qPesq.Open;

    if not Dm.qPesq.IsEmpty then begin
       EdNom.Text := DM.qPesq.FieldByName('nome').Value;
       gdPesq.Visible := False;
       cbUn.Items.Add(DM.qPesq.FieldByName('ft_conv_un').text);
       cbUn.Items.Add(DM.qPesq.FieldByName('ft_conv_2un').text);
       cbUn.Update;
       cbUn.ItemIndex := 0;

       cbUn.SetFocus;
    end;
  end;
end;

procedure TfCadSemiAcabado.btAddPClick(Sender: TObject);
var
  nHr : TTime;
  nOr : integer;
  nCt : real;
begin

  if trim(cbProcesso.Text) = '' then begin
     Application.MessageBox('Informe o processo!','Atenção');
     cbProcesso.SetFocus;
     exit;
  end;

  qProc.First;
  if qProc.Locate( 'idprocesso', strtoint(copy(cbprocesso.Text,1,3)), [] ) then begin
     Application.MessageBox('Processo já Cadastrado!','Atenção');
     cbProcesso.ItemIndex := -1;
     cbProcesso.SetFocus;
     exit;
  end;


  try
     nOr := strtoint(edOrdem.Text);
  except
     Application.MessageBox('Informe a Ordem!','Atenção');
     edOrdem.SetFocus;
     exit;
  end;

  try
     nHr := strtotime(edtempo.Text);
  except
     Application.MessageBox('Informe o Tempo!','Atenção');
     edTempo.SetFocus;
     exit;
  end;

  try
     nCt := strtofloat(edCusto.Text);
  except
     Application.MessageBox('Informe o Custo!','Atenção');
     edCusto.SetFocus;
     exit;
  end;


  qProc.Append;
  qProcId.Value            := InsereCodigo('Processo_SA', 'ID');
  qProcIdSemiAcabado.Value := Tid.Value;
  qProcIdProcesso.Value    := strtoint(copy( cbprocesso.Text, 1, 3 ));
  qProcDescricao.Value     := UpperCase(copy( cbprocesso.Text, 5, length(cbprocesso.text)-4 ));
  if ckultimo.Checked then
     qProcUltimo.Value     := 'T'
  else
     qProcUltimo.Value     := 'F';
  qProcTempo.Value         := nHr;
  qProcOrdem.Value         := nOr;
  qProcCusto.Value         := nCt;
  qProc.Post;

  //mostrar item dos processos
  DM.qPesq.Close;
  DM.qPesq.SQL.Clear;
  DM.qPesq.SQL.Add(' select idProduto, unidade from processo_i where idprocesso =  '+ qProcIdProcesso.Text );
  DM.qPesq.Open;
  while not Dm.qPesq.Eof do  begin
     qProcItem.Insert;
     qProcItemIdProcesso_sa.Value  := qProcId.Value;
     qProcItemIdProduto.AsInteger  := DM.qPesq.FieldByName('idProduto').AsInteger;
     qProcItemUn.Text              := DM.qPesq.FieldByName('unidade').Text;
     qProcItem.Post;
     dm.qPesq.Next;
  end;

  qProc.Close;
  qProc.ParamByName('IDs').value := TId.value;
  qProc.Open;

  qProcItem.Close;
  qProcItem.Params[0].Value := qProcId.value;
  qProcItem.Open;

  cbProcesso.ItemIndex := -1;
  ckUltimo.Checked     := false;
  edOrdem.Text         := '';
  edTempo.Text         := '';
  edCusto.Text         := '';

  cbProcesso.SetFocus;

end;

procedure TfCadSemiAcabado.grProcDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn;
  State: TGridDrawState);
begin
  inherited;
   with grProc do
   begin
    if  DataSource.DataSet.State in [dsEdit, dsInsert, dsBrowse] then //Cor da linha selecionada
        if (Rect.Top = TStringGrid(grProc).CellRect( DataCol ,TStringGrid(grProc).Row).Top)
          or( gdSelected in State)  then
         begin
           Canvas.FillRect(Rect);
           Canvas.Brush.Color := clGradientActiveCaption;
           DefaultDrawDataCell(Rect,Column.Field,State)
        end;
   end;
end;

procedure TfCadSemiAcabado.qProcAfterPost(DataSet: TDataSet);
begin
  qProc.ApplyUpdates;
  
end;

procedure TfCadSemiAcabado.EdNomKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if key = vk_down then
     if gdPesq.Visible then
        gdPesq.SetFocus;

end;

procedure TfCadSemiAcabado.edQtdKeyPress(Sender: TObject; var Key: Char);
begin
  somente_numero(key);

end;

procedure TfCadSemiAcabado.edCustoKeyPress(Sender: TObject; var Key: Char);
begin
  somente_numero(key);

end;

procedure TfCadSemiAcabado.edTempoKeyPress(Sender: TObject; var Key: Char);
begin
  somente_numero_sem_virgula(key);

end;

procedure TfCadSemiAcabado.BtAddPiClick(Sender: TObject);
var
  nPr : integer;
  nQt : real;

begin

  if trim(edNom.Text) = '' then begin
     Application.MessageBox('Informe a Matéria-Prima!','Atenção');
     edNom.SetFocus;
     exit;
  end;

  if trim(cbUn.Text) = '' then begin
     Application.MessageBox('Informe a Unidade!','Atenção');
     cbUn.SetFocus;
     exit;
  end;

  try
     nPr := strtoint(edCod.Text);
  except
     Application.MessageBox('Informe o Codigo da Matéria-Prima!','Atenção');
     edCod.SetFocus;
     exit;
  end;

  try
     nQt := strtofloat(edQtd.Text);
  except
     Application.MessageBox('Informe a Quantidade!','Atenção');
     edQtd.SetFocus;
     exit;
  end;

  qProcItem.Insert;
  qProcItemId.Value            := InsereCodigo('Processo_sa_i', 'ID');
  qProcItemIdProcesso_sa.Value := qProcId.Value;
  qProcItemIdProduto.Value     := nPr;
  qProcItemdescricao.Value     := upperCase(edNom.Text);
  qProcItemUn.Value            := cbUn.text;
  qProcItemQtde.Value          := nQt;
  qProcItem.Post;

  qProcItem.Close;
  qProcItem.Params[0].value    := qProcId.value;
  qProcItem.Open;

  edCod.Clear;
  EdNom.Clear;
  cbUn.Items.Clear;
  edQtd.Clear;
  gdPesq.Visible := false;
  CheckDBGrid4.SetFocus;

end;

procedure TfCadSemiAcabado.qProcItemAfterPost(DataSet: TDataSet);
begin
  qProcItem.ApplyUpdates;

end;

procedure TfCadSemiAcabado.CheckDBGrid4CellClick(Column: TColumn);
begin

 if not (T.State in [dsEdit, dsInsert]) then
    exit;

 if (qProcItem.IsEmpty = false) and (checkDbgrid4.SelectedIndex = 2) then begin
    DM.qPesq.Close;
    DM.qPesq.SQL.Clear;
    DM.qPesq.SQL.Add( ' select ft_conv_un, ft_conv_2un from produto where tipo = ''M'' and ' +
                    ' id =  '+ qProcItemIdProduto.Text );
    DM.qPesq.Open;
    checkDbgrid4.Columns[2].PickList.Clear;
    checkDbgrid4.Columns[2].PickList.Add( dm.qPesq.fieldbyname('ft_conv_un').text );
    checkDbgrid4.Columns[2].PickList.Add( dm.qPesq.fieldbyname('ft_conv_2un').text );
 end;

end;

procedure TfCadSemiAcabado.CheckDBGrid4KeyPress(Sender: TObject;
  var Key: Char);
begin
 if key = #13 then begin
   IF CheckDBgrid4.SelectedIndex = 1 then begin
      CheckDBgrid4.SelectedIndex := 2;
      qProcItem.Next;
      if qProcItem.Eof = false then
         CheckDBgrid4.SelectedIndex := 1;
   end;
 end;


end;

procedure TfCadSemiAcabado.CheckDBGrid4KeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
  if key = vk_down then
     if qProcItem.Eof then begin
        qProcItem.Cancel;
        qProcItem.First;
     end;

end;

procedure TfCadSemiAcabado.grProcKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
 if key = vk_down then
     if qProc.Eof then
        qProc.First;
end;

procedure TfCadSemiAcabado.acSairExecute(Sender: TObject);
begin
  if T.State in [dsEdit, dsInsert] then
     Exit;

  inherited;

end;

end.
